import datetime
import os
import telebot
import requests
from bs4 import BeautifulSoup

BOT_TOKEN = os.environ.get('BOT_TOKEN')
# –∑–∞–¥–∞–µ–º —Ç–æ–∫–µ–Ω –±–æ—Ç–∞
print(BOT_TOKEN)

bot = telebot.TeleBot(BOT_TOKEN)


# —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
def parse_schedule(group):
    # –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
    url = f"https://petrsu.ru/schedule/term?group={group}"
    response = requests.get(url)
    soup = BeautifulSoup(response.text, "html.parser")
    f_schedule = ""  # –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫—É –¥–ª—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
    cur_date = datetime.datetime.now().strftime("%-d.%m")
    print(cur_date)
    for day_schedule in soup.find_all('div', class_='panel-body'):
        schedule = ""
        prev_div = day_schedule.find_previous_sibling('div')
        day_text = prev_div.text.strip()
        if cur_date in day_text:
            schedule += f"üü¢  {day_text}.\n"
        else:
            schedule += f"üî¥  {day_text}.\n"
        table_rows = day_schedule.find_all('div', class_='rTableRow')
        if len(table_rows) == 0:
            schedule += f"  *–ó–∞–Ω—è—Ç–∏–π –≤ —ç—Ç–æ—Ç –¥–µ–Ω—å –Ω–µ—Ç!*\n\n"
        else:
            for lesson in table_rows:
                table_cells = lesson.find_all('div', {'class': 'rTableCell'})
                instructor = "–£–í–û–õ–ï–ù"
                number = table_cells[0].text.strip()
                time = ' '.join(table_cells[1].stripped_strings)
                time = time.replace(" ", "-")
                course = table_cells[2].b.text.strip()
                try:
                    instructor = table_cells[2].span.a.text.strip()
                except:
                    instructor = table_cells[2].span.text.strip()
                dates = table_cells[2].find_all('br')[1].next_sibling.strip()
                type = ' '.join(table_cells[3].stripped_strings)
                room = table_cells[4].text.strip()

                schedule += f"‚Äî –í—Ä–µ–º—è: *{time}*\n" \
                            f"‚Äî –ù–æ–º–µ—Ä –ø–∞—Ä—ã: *{number}*\n" \
                            f"‚Äî –ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞:\n _{course}_\n" \
                            f"‚Äî –ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å: _{instructor}_\n" \
                            f"‚Äî –¢–∏–ø –∑–∞–Ω—è—Ç–∏—è: {type}\n" \
                            f"‚Äî –ö–∞–±–∏–Ω–µ—Ç: {room}\n" \
                            f"‚Äî –î–∞—Ç—ã –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è –∫—É—Ä—Å–∞: {dates}\n\n"
        f_schedule += schedule
    return f"üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ:\n\n{f_schedule}"  # –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –≤ –Ω—É–∂–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ

# –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@bot.message_handler(commands=['start'])
def send_welcome(message):
    bot.reply_to(message, "–ü—Ä–∏–≤–µ—Ç! –í–≤–µ–¥–∏ –Ω–æ–º–µ—Ä –≥—Ä—É–ø–ø—ã, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ. üìö")


# –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help
@bot.message_handler(commands=['help'])
def send_help(message):
    bot.reply_to(message, "–ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ, –≤–≤–µ–¥–∏ –Ω–æ–º–µ—Ä –≥—Ä—É–ø–ø—ã. üìÖ")

# –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /today
@bot.message_handler(commands=['today'])
def send_today_schedule(message):
    try:
        group = message.text.split()[1].strip()  # –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –Ω–æ–º–µ—Ä –≥—Ä—É–ø–ø—ã –≤ —á–∏—Å–ª–æ
        schedule = parse_schedule(group)  # –ø–∞—Ä—Å–∏–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –¥–∞–Ω–Ω–æ–π –≥—Ä—É–ø–ø—ã
        today_schedule = ""
        cur_date = datetime.datetime.now().strftime("%-d.%m")
        # –ò—â–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–ª—å–∫–æ –Ω–∞ —Ç–µ–∫—É—â–∏–π –¥–µ–Ω—å
        for day_schedule in schedule.split('üü¢')[1:]:
            if cur_date in day_schedule:
                today_schedule = f'üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è:\n\n üü¢ {day_schedule}'
                break
        if today_schedule:
            bot.reply_to(message, today_schedule, parse_mode="Markdown")
        else:
            bot.reply_to(message, "–ù–∞ —Å–µ–≥–æ–¥–Ω—è –∑–∞–Ω—è—Ç–∏–π –Ω–µ—Ç. üî•", parse_mode="Markdown")
    except:
        bot.reply_to(message, "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä –≥—Ä—É–ø–ø—ã. –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑. ‚ùå")

# –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
@bot.message_handler(func=lambda message: True)
def send_schedule(message):
    try:
        print(message.text)
        group = int(message.text.strip())  # –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –Ω–æ–º–µ—Ä –≥—Ä—É–ø–ø—ã –≤ —á–∏—Å–ª–æ
        schedule = parse_schedule(group)  # –ø–∞—Ä—Å–∏–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –¥–∞–Ω–Ω–æ–π –≥—Ä—É–ø–ø—ã
        if len(schedule) > 4000:
            # –†–∞–∑–±–∏–≤–∞–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –±–ª–æ–∫–∏ –ø–æ 4000 —Å–∏–º–≤–æ–ª–æ–≤
            schedule_blocks = schedule.split("\n\n")
            current_block = ""
            for block in schedule_blocks:
                if len(current_block + block) > 4000:
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –±–ª–æ–∫ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                    bot.reply_to(message, current_block, parse_mode="Markdown")
                    current_block = block
                else:
                    current_block += block + "\n\n"
            if current_block:
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –±–ª–æ–∫ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                bot.reply_to(message, current_block, parse_mode="Markdown")
        else:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            bot.reply_to(message, schedule, parse_mode="Markdown")
    except:
        bot.reply_to(message, "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä –≥—Ä—É–ø–ø—ã. –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑. ‚ùå")


bot.polling(none_stop=True)
